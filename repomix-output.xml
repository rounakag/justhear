This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    auth/
      AuthModal.tsx
      AuthProvider.tsx
      LoginForm.tsx
      SignUpForm.tsx
    sections/
      ReachOut.tsx
      Testimonials.tsx
    ui/
      accordion.tsx
      button.tsx
      dialog.tsx
      sheet.tsx
    BubbleBackground.tsx
    SchedulerModal.tsx
    SharpButton.tsx
  hooks/
    useAuth.ts
  lib/
    utils.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/auth/AuthModal.tsx">
import React, { useState } from "react";
import { Dialog, DialogContent, DialogTrigger, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { SignUpForm } from "./SignUpForm";
import { LoginForm } from "./LoginForm";

interface AuthModalProps {
  children: React.ReactNode;
}

export function AuthModal({ children }: AuthModalProps) {
  const [open, setOpen] = useState(false);
  const [mode, setMode] = useState<'login' | 'signup'>('login');

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {children}
      </DialogTrigger>
      <DialogContent className="max-w-md w-full p-0">
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-t-2xl py-6 px-7 text-center">
          <DialogTitle className="text-xl font-bold">
            {mode === 'login' ? 'üîê Welcome Back' : '‚ú® Create Account'}
          </DialogTitle>
          <p className="text-blue-100 text-sm mt-1">
            {mode === 'login' ? 'Sign in to your anonymous account' : 'Join our anonymous community'}
          </p>
        </div>
        <div className="p-6">
          {mode === 'login' ? (
            <LoginForm 
              onSuccess={() => setOpen(false)}
              onSwitchToSignup={() => setMode('signup')}
            />
          ) : (
            <SignUpForm 
              onSuccess={() => setOpen(false)}
              onSwitchToLogin={() => setMode('login')}
            />
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="src/components/auth/AuthProvider.tsx">
import React from 'react';
import { AuthContext, useAuthProvider } from '@/hooks/useAuth';

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const auth = useAuthProvider();
  
  return (
    <AuthContext.Provider value={auth}>
      {children}
    </AuthContext.Provider>
  );
}
</file>

<file path="src/components/auth/LoginForm.tsx">
import React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { useAuth } from "@/hooks/useAuth";

const loginSchema = z.object({
  username: z.string().min(1, "Username is required"),
  password: z.string().min(1, "Password is required"),
});

type LoginFormData = z.infer<typeof loginSchema>;

interface LoginFormProps {
  onSuccess: () => void;
  onSwitchToSignup: () => void;
}

export function LoginForm({ onSuccess, onSwitchToSignup }: LoginFormProps) {
  const { login, isLoading, error } = useAuth();
  
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema),
  });

  const onSubmit = async (data: LoginFormData) => {
    const success = await login(data.username, data.password);
    if (success) {
      onSuccess();
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
          {error}
        </div>
      )}

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Username *
        </label>
        <input
          {...register("username")}
          type="text"
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="Enter your username"
        />
        {errors.username && (
          <p className="text-red-600 text-sm mt-1">{errors.username.message}</p>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Password *
        </label>
        <input
          {...register("password")}
          type="password"
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="Enter your password"
        />
        {errors.password && (
          <p className="text-red-600 text-sm mt-1">{errors.password.message}</p>
        )}
      </div>

      <Button
        type="submit"
        disabled={isLoading}
        className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
      >
        {isLoading ? 'Signing In...' : 'Sign In'}
      </Button>

      <div className="text-center pt-4 border-t border-gray-200">
        <p className="text-sm text-gray-600">
          Don't have an account?{' '}
          <button
            type="button"
            onClick={onSwitchToSignup}
            className="text-blue-600 hover:text-blue-700 font-medium"
          >
            Create Account
          </button>
        </p>
      </div>
    </form>
  );
}
</file>

<file path="src/components/auth/SignUpForm.tsx">
import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { useAuth } from "@/hooks/useAuth";

const signUpSchema = z.object({
  username: z
    .string()
    .min(3, "Username must be at least 3 characters")
    .max(20, "Username must be less than 20 characters")
    .regex(/^[a-zA-Z0-9_]+$/, "Username can only contain letters, numbers, and underscores"),
  password: z
    .string()
    .min(8, "Password must be at least 8 characters")
    .regex(/[a-z]/, "Password must contain at least one lowercase letter")
    .regex(/[A-Z]/, "Password must contain at least one uppercase letter")
    .regex(/\d/, "Password must contain at least one number")
    .regex(/[!@#$%^&*(),.?":{}|<>]/, "Password must contain at least one special character"),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
});

type SignUpFormData = z.infer<typeof signUpSchema>;

interface SignUpFormProps {
  onSuccess: () => void;
  onSwitchToLogin: () => void;
}

export function SignUpForm({ onSuccess, onSwitchToLogin }: SignUpFormProps) {
  const [usernameStatus, setUsernameStatus] = useState<'available' | 'taken' | 'checking' | null>(null);
  const { signUp, isLoading } = useAuth();
  
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm<SignUpFormData>({
    resolver: zodResolver(signUpSchema),
  });

  const username = watch("username");

  const checkUsernameAvailability = async (username: string) => {
    if (username.length < 3) return;
    
    setUsernameStatus('checking');
    
    // Simulate API call - replace with actual API
    setTimeout(() => {
      const takenUsernames = ['admin', 'user', 'test', 'guest']; // Mock taken usernames
      setUsernameStatus(takenUsernames.includes(username.toLowerCase()) ? 'taken' : 'available');
    }, 500);
  };

  React.useEffect(() => {
    if (username && username.length >= 3) {
      const timer = setTimeout(() => checkUsernameAvailability(username), 300);
      return () => clearTimeout(timer);
    } else {
      setUsernameStatus(null);
    }
  }, [username]);

  const onSubmit = async (data: SignUpFormData) => {
    if (usernameStatus !== 'available') return;
    
    const success = await signUp(data.username, data.password);
    if (success) {
      onSuccess();
    }
  };

  const getUsernameStatusColor = () => {
    switch (usernameStatus) {
      case 'available': return 'text-green-600';
      case 'taken': return 'text-red-600';
      case 'checking': return 'text-yellow-600';
      default: return 'text-gray-400';
    }
  };

  const getUsernameStatusText = () => {
    switch (usernameStatus) {
      case 'available': return '‚úÖ Username available';
      case 'taken': return '‚ùå Username already taken';
      case 'checking': return '‚è≥ Checking availability...';
      default: return '';
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Username *
        </label>
        <input
          {...register("username")}
          type="text"
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="Enter your unique username"
        />
        {errors.username && (
          <p className="text-red-600 text-sm mt-1">{errors.username.message}</p>
        )}
        {usernameStatus && (
          <p className={`text-sm mt-1 ${getUsernameStatusColor()}`}>
            {getUsernameStatusText()}
          </p>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Password *
        </label>
        <input
          {...register("password")}
          type="password"
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="Create a strong password"
        />
        {errors.password && (
          <p className="text-red-600 text-sm mt-1">{errors.password.message}</p>
        )}
        <div className="mt-2 text-xs text-gray-500">
          <p>Password must contain:</p>
          <ul className="list-disc list-inside space-y-1">
            <li>At least 8 characters</li>
            <li>One uppercase & lowercase letter</li>
            <li>One number & special character</li>
          </ul>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Confirm Password *
        </label>
        <input
          {...register("confirmPassword")}
          type="password"
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="Confirm your password"
        />
        {errors.confirmPassword && (
          <p className="text-red-600 text-sm mt-1">{errors.confirmPassword.message}</p>
        )}
      </div>

      <Button
        type="submit"
        disabled={isLoading || usernameStatus !== 'available'}
        className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
      >
        {isLoading ? 'Creating Account...' : 'Create Anonymous Account'}
      </Button>

      <div className="text-center pt-4 border-t border-gray-200">
        <p className="text-sm text-gray-600">
          Already have an account?{' '}
          <button
            type="button"
            onClick={onSwitchToLogin}
            className="text-blue-600 hover:text-blue-700 font-medium"
          >
            Sign In
          </button>
        </p>
      </div>
    </form>
  );
}
</file>

<file path="src/components/sections/ReachOut.tsx">
import React from "react";

type Feeling = { emoji:string; text:string };

interface ReachOutProps {
  /* Pass a custom list if you need more/other boxes */
  feelings?: Feeling[];
}

/**
 * Radial desktop layout + horizontal-scroll mobile layout.
 * ‚Ä¢ Any number of feelings is automatically spaced around a circle.
 * ‚Ä¢ Centre badge stays in the middle.
 */
export const ReachOut = ({ feelings }: ReachOutProps) => {
  /* Default six feelings */
  const data: Feeling[] = feelings ?? [
    { emoji:"üòî", text:"Nobody is mine‚Ä¶ it's my fault." },
    { emoji:"ü§î", text:"Am I really that wrong about everything?" },
    { emoji:"ü§ó", text:"I wish someone could hug me until my soul melts." },
    { emoji:"üò¢", text:"Life took something that stole my smile." },
    { emoji:"üòû", text:"I no longer want to prove I'm right." },
    { emoji:"üò§", text:"Nobody apologized; they blamed me for reacting." },
  ];

  /* -----  DESKTOP (‚â•md)  ----- */
  const desktop = (
    <div className="relative w-[420px] h-[420px] mx-auto hidden md:block">
      {/* centre badge */}
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="w-28 h-28 rounded-full bg-purple-600 text-white
                        flex items-center justify-center text-center
                        text-sm font-semibold px-2">
          You<br/>Need<br/>Validation
        </div>
      </div>

      {/* orbiting cards */}
      {data.map((f, i) => {
        const angle = (360 / data.length) * i;          // deg
        const r     = 160;                               // radius
        const rad   = angle * Math.PI / 180;             // deg‚Üírad
        const x     = 210 + r * Math.cos(rad) - 70;      // 70 = half card-width
        const y     = 210 + r * Math.sin(rad) - 60;      // 60 = half card-height

        return (
          <div
            key={i}
            className="absolute w-36 px-3 py-4 bg-white rounded-xl shadow
                       text-center text-gray-700 select-none
                       hover:-translate-y-1 transition"
            style={{ top:y, left:x }}
          >
            <div className="text-2xl mb-1">{f.emoji}</div>
            <span className="text-xs italic">‚Äú{f.text}‚Äù</span>
          </div>
        );
      })}
    </div>
  );

  /* -----  MOBILE (<md)  ----- */
  const mobile = (
    <div className="md:hidden flex gap-4 overflow-x-auto py-4 px-2
                    snap-x scrollbar-hide">
      {data.map((f,i) => (
        <div key={i}
             className="snap-center flex-shrink-0 w-40 bg-white rounded-xl
                        shadow px-4 py-6 text-center text-gray-700
                        hover:-translate-y-1 transition">
          <div className="text-2xl mb-2">{f.emoji}</div>
          <span className="text-xs italic">‚Äú{f.text}‚Äù</span>
        </div>
      ))}
    </div>
  );

  return (
    <>
      {desktop}
      {mobile}
    </>
  );
};
</file>

<file path="src/components/sections/Testimonials.tsx">
import React from "react";
import { cn } from "@/lib/utils";

const TESTIMONIALS = [
  { quote: "I felt lighter after just one call. Someone finally understood without trying to fix me.", meta: "After relationship conflict", emoji: "üòå" },
  { quote: "Someone was finally 100% on my side. No judgment, just pure validation.", meta: "After workplace criticism", emoji: "ü•∫", featured: true },
  { quote: "Instant reassurance that I wasn't alone. Worth every penny for my peace of mind.", meta: "During family stress", emoji: "üòä" },
  { quote: "Affordable, discreet, and genuinely human. This service is a lifesaver.", meta: "Regular user", emoji: "üôÇ" },
];

export function Testimonials() {
  return (
    <section id="testimonials" className="py-10 md:py-20 bg-gray-50">
      <div className="max-w-6xl mx-auto px-3 sm:px-6">
        <h2 className="text-3xl md:text-4xl font-bold text-center mb-4 text-gray-800">
          Real stories, real validation
        </h2>
        <p className="text-center text-gray-600 mb-6 md:mb-12 text-base md:text-lg">
          See how a simple conversation changed everything
        </p>
        
        {/* Fixed container with proper overflow handling */}
        <div className="relative">
          <div className="flex md:grid md:grid-cols-4 gap-4 overflow-x-auto scrollbar-hide snap-x md:snap-none pb-8 md:pb-0 px-2">
            {TESTIMONIALS.map((t, i) => (
              <div
                key={i}
                className={cn(
                  "bg-white rounded-2xl shadow-sm p-6 min-w-[280px] max-w-[320px] shrink-0 snap-center transition-transform hover:-translate-y-1 relative",
                  t.featured && "border-2 border-blue-500 shadow-lg"
                )}
              >
                {/* Fixed badge positioning - now outside the card flow */}
                {t.featured && (
                  <div className="absolute -top-4 left-1/2 -translate-x-1/2 z-20">
                    <span className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-1 rounded-full text-xs font-semibold whitespace-nowrap">
                      ‚ú® Most helpful
                    </span>
                  </div>
                )}
                
                <div className="text-yellow-400 mb-3 text-lg">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</div>
                <blockquote className="italic mb-4 text-gray-700 leading-relaxed">
                  "{t.quote}"
                </blockquote>
                <div className="flex gap-3 items-center">
                  <span className="rounded-full w-12 h-12 flex items-center justify-center bg-gray-100 text-xl">
                    {t.emoji}
                  </span>
                  <div>
                    <strong className="block text-gray-800">Anonymous user</strong>
                    <small className="text-gray-500">{t.meta}</small>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/ui/accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"
import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? "span" : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root
const DialogTrigger = DialogPrimitive.Trigger
const DialogPortal = DialogPrimitive.Portal
const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
}
</file>

<file path="src/components/ui/sheet.tsx">
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root
const SheetTrigger = SheetPrimitive.Trigger
const SheetClose = SheetPrimitive.Close
const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content> {
  side?: "top" | "bottom" | "left" | "right"
}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(
        "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
        side === "top" && "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        side === "bottom" && "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        side === "left" && "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        side === "right" && "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
        className
      )}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetContent,
  SheetClose,
}
</file>

<file path="src/components/BubbleBackground.tsx">
import React from "react";

export function BubbleBackground() {
  return (
    <div className="absolute inset-0 -z-10 opacity-20">
      <svg
        width="100%"
        height="100%"
        viewBox="0 0 400 400"
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true"
      >
        <circle cx="70" cy="390" r="40" fill="#fff" className="bubble delay-0" />
        <circle cx="160" cy="410" r="60" fill="#fff" className="bubble delay-4" />
        <circle cx="300" cy="390" r="80" fill="#fff" className="bubble delay-8" />
        <circle cx="220" cy="420" r="35" fill="#fff" className="bubble delay-12" />
        <circle cx="340" cy="410" r="50" fill="#fff" className="bubble delay-16" />
      </svg>
    </div>
  );
}
</file>

<file path="src/components/SchedulerModal.tsx">
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogTrigger, DialogTitle } from "@/components/ui/dialog";
import { useAuth } from "@/hooks/useAuth";

const SLOTS: Record<string, string[]> = {
  "2025-08-19": ["09:00", "10:30", "14:00", "15:30", "17:00", "19:00", "20:30"],
  "2025-08-20": ["10:00", "11:30", "13:00", "16:00", "18:00", "19:30", "21:00"],
  "2025-08-21": ["08:30", "10:00", "12:00", "14:30", "16:30", "18:30", "20:00"],
  "2025-08-22": ["09:30", "11:00", "13:30", "15:00", "17:30", "19:00", "21:30"],
  "2025-08-23": ["10:30", "12:00", "14:00", "15:30", "17:00", "18:30", "20:30"],
  "2025-08-24": ["09:00", "10:30", "12:30", "14:30", "16:00", "19:30", "21:00"],
  "2025-08-25": ["08:00", "11:00", "13:00", "15:00", "17:30", "19:00", "20:30"]
};

interface SchedulerModalProps {
  triggerClassName?: string;
  children?: React.ReactNode;
}

export function SchedulerModal({ triggerClassName, children }: SchedulerModalProps) {
  const { user } = useAuth();
  const [open, setOpen] = useState(false);
  const [selectedDate, setSelectedDate] = useState<string | null>(null);
  const [selectedTime, setSelectedTime] = useState<string | null>(null);

  const handleOpen = () => {
    if (!user) {
      // Trigger login modal - find AuthModal trigger and click it
      const authTrigger = document.querySelector('[data-auth-trigger]') as HTMLElement;
      if (authTrigger) {
        authTrigger.click();
      } else {
        alert("Please login to book a session");
      }
      return;
    }
    setOpen(true);
  };

  const today = new Date();
  const dates = Array.from({ length: 7 }, (_, i) => {
    const date = new Date(today);
    date.setDate(today.getDate() + i);
    const dateStr = date.toISOString().split("T")[0];
    return {
      label: date.toLocaleDateString("en-US", { weekday: "short", month: "short", day: "numeric" }),
      value: dateStr,
    };
  });

  const times = selectedDate ? SLOTS[selectedDate] || [] : [];

  const handleBooking = () => {
    if (!selectedDate || !selectedTime) return;
    
    alert(`Booking confirmed!\n\nDate: ${dates.find(d => d.value === selectedDate)?.label}\nTime: ${selectedTime}\nAmount: ‚Çπ49\n\nYou will receive a confirmation call 5 minutes before your session.`);
    
    setOpen(false);
    setSelectedDate(null);
    setSelectedTime(null);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {children || (
          <Button 
            className={`rounded-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 ${triggerClassName}`}
            size="lg"
            onClick={handleOpen}
          >
            üéß Book Session
          </Button>
        )}
      </DialogTrigger>
      
      {user && (
        <DialogContent className="max-w-lg w-full p-0 max-h-[90vh] overflow-y-auto">
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-t-2xl py-6 px-7 flex flex-col items-center">
            <DialogTitle className="text-xl font-bold">üéß Book Your Session</DialogTitle>
            <p className="text-blue-100">Choose your preferred date and time</p>
          </div>
          
          <div className="p-6">
            {/* Date Selection */}
            <div className="mb-6">
              <h3 className="font-semibold mb-3 text-gray-800">Select Date</h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                {dates.map((dt) => (
                  <Button
                    key={dt.value}
                    variant={selectedDate === dt.value ? "default" : "outline"}
                    onClick={() => {
                      setSelectedDate(dt.value);
                      setSelectedTime(null);
                    }}
                    className="rounded-lg text-xs p-2 h-auto"
                  >
                    <div className="text-center">
                      <div className="font-semibold">{dt.label.split(' ')[0]}</div>
                      <div className="text-xs opacity-80">{dt.label.split(' ').slice(1).join(' ')}</div>
                    </div>
                  </Button>
                ))}
              </div>
            </div>
            
            {/* Time Slots */}
            <div className="mb-6">
              <h3 className="font-semibold mb-3 text-gray-800">Available Time Slots</h3>
              <div className="grid grid-cols-3 gap-2">
                {selectedDate ? (
                  times.length > 0 ? (
                    times.map((tm) => (
                      <Button
                        key={tm}
                        variant={selectedTime === tm ? "default" : "outline"}
                        onClick={() => setSelectedTime(tm)}
                        className="rounded-lg text-sm"
                      >
                        {tm}
                      </Button>
                    ))
                  ) : (
                    <div className="col-span-3 text-center text-gray-500 py-4">
                      No slots available for this date
                    </div>
                  )
                ) : (
                  <div className="col-span-3 text-center text-gray-500 py-4">
                    Please select a date first
                  </div>
                )}
              </div>
            </div>
            
            {/* Booking Summary */}
            {selectedDate && selectedTime && (
              <div className="rounded-xl bg-gray-50 p-4 mb-6">
                <div className="font-semibold mb-3 text-gray-800">Session Summary</div>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span>Date:</span>
                    <span className="font-medium">{dates.find(d => d.value === selectedDate)?.label}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Time:</span>
                    <span className="font-medium">{selectedTime}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Duration:</span>
                    <span className="font-medium">30 minutes</span>
                  </div>
                  <div className="border-t pt-2 mt-3">
                    <div className="flex justify-between items-center">
                      <span>Session Fee:</span>
                      <span className="text-gray-500 line-through">‚Çπ150</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span>Special Price:</span>
                      <span className="font-bold text-blue-600 text-lg">‚Çπ49</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            {/* Confirm Button */}
            <Button
              disabled={!(selectedDate && selectedTime)}
              className="w-full rounded-lg text-base bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:opacity-50"
              onClick={handleBooking}
            >
              {selectedDate && selectedTime ? `Confirm Booking ‚Äì ‚Çπ49` : `Select Date & Time to Continue`}
            </Button>
          </div>
        </DialogContent>
      )}
    </Dialog>
  );
}
</file>

<file path="src/components/SharpButton.tsx">
import React from "react";

export function SharpButton({ children, ...props }: React.ButtonHTMLAttributes<HTMLButtonElement>) {
  return (
    <button
      {...props}
      className="border-2 border-blue-600 shadow-sm text-blue-600 font-semibold rounded-lg px-4 py-2 transition-colors duration-300 ease-in-out hover:bg-gradient-to-r hover:from-blue-600 hover:to-purple-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
    >
      {children}
    </button>
  );
}
</file>

<file path="src/hooks/useAuth.ts">
import { useState, useEffect, createContext, useContext } from 'react';
import Cookies from 'js-cookie';

interface User {
  username: string;
  id: string;
}

interface AuthContextType {
  user: User | null;
  login: (username: string, password: string) => Promise<boolean>;
  signUp: (username: string, password: string) => Promise<boolean>;
  logout: () => void;
  isLoading: boolean;
  error: string | null;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

// Mock authentication functions - replace with real API calls
const mockUsers = new Map<string, { password: string; id: string }>();

export function useAuthProvider() {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Check if user is logged in on app start
    const savedUser = Cookies.get('user');
    if (savedUser) {
      try {
        setUser(JSON.parse(savedUser));
      } catch (e) {
        Cookies.remove('user');
      }
    }
  }, []);

  const login = async (username: string, password: string): Promise<boolean> => {
    setIsLoading(true);
    setError(null);

    try {
      // Mock API call
      await new Promise(resolve => setTimeout(resolve, 500));

      const storedUser = mockUsers.get(username.toLowerCase());
      if (!storedUser || storedUser.password !== password) {
        setError('Invalid username or password');
        return false;
      }

      const userData = { username, id: storedUser.id };
      setUser(userData);
      Cookies.set('user', JSON.stringify(userData), { expires: 7 });
      return true;
    } catch (err) {
      setError('Login failed. Please try again.');
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const signUp = async (username: string, password: string): Promise<boolean> => {
    setIsLoading(true);
    setError(null);

    try {
      // Mock API call
      await new Promise(resolve => setTimeout(resolve, 500));

      if (mockUsers.has(username.toLowerCase())) {
        setError('Username already exists');
        return false;
      }

      const userId = Math.random().toString(36).substr(2, 9);
      mockUsers.set(username.toLowerCase(), { password, id: userId });

      const userData = { username, id: userId };
      setUser(userData);
      Cookies.set('user', JSON.stringify(userData), { expires: 7 });
      return true;
    } catch (err) {
      setError('Sign up failed. Please try again.');
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    Cookies.remove('user');
  };

  return {
    user,
    login,
    signUp,
    logout,
    isLoading,
    error,
  };
}

export { AuthContext };
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/App.tsx">
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogTrigger, DialogTitle } from "@/components/ui/dialog";
import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from "@/components/ui/accordion";
import { Sheet, SheetTrigger, SheetContent } from "@/components/ui/sheet";
import { cn } from "@/lib/utils";
import { AuthProvider } from './components/auth/AuthProvider';
import { AuthModal } from './components/auth/AuthModal';
import { useAuth } from './hooks/useAuth';
import { BubbleBackground } from '@/components/BubbleBackground';
import { SharpButton } from '@/components/SharpButton';
import { ReachOut } from '@/components/ReachOut';
import { SchedulerModal } from '@/components/SchedulerModal';

const NAV_LINKS = [
  { href: "#how", label: "How it works" },
  { href: "#pricing", label: "Pricing" },
  { href: "#faq", label: "FAQ" },
];

const TESTIMONIALS = [
  { quote: "I felt lighter after just one call. Someone finally understood without trying to fix me.", meta: "After relationship conflict", emoji: "üòå" },
  { quote: "Someone was finally 100% on my side. No judgment, just pure validation.", meta: "After workplace criticism", emoji: "ü•∫", featured: true },
  { quote: "Instant reassurance that I wasn't alone. Worth every penny for my peace of mind.", meta: "During family stress", emoji: "üòä" },
  { quote: "Affordable, discreet, and genuinely human. This service is a lifesaver.", meta: "Regular user", emoji: "üôÇ" },
];

const EXAMPLES = [
  { emoji: "üòî", text: "Nobody is mine... it's my fault." },
  { emoji: "ü§î", text: "Am I really that wrong about everything?" },
  { emoji: "ü§ó", text: "I wish someone could hug me until my soul melts." },
  { emoji: "üò¢", text: "Life took something that stole my smile." },
  { emoji: "üòû", text: "I no longer want to prove I'm right." },
  { emoji: "üò§", text: "Nobody apologized; they blamed me for reacting." },
];

const FEATURES = [
  { icon: "üìÖ", title: "Book Your Slot", desc: "Choose a convenient date and time based on slot availability." },
  { icon: "ü§ù", title: "Get Matched", desc: "A trained, empathetic listener will call you at your scheduled time." },
  { icon: "üíù", title: "Feel Validated", desc: "Leave every call feeling heard, understood, and knowing that your feelings matter." },
];

const DIFFERENT = [
  {
    icon: "‚ùå",
    title: "Traditional Therapy",
    color: "text-red-600",
    items: [
      "What childhood trauma caused this?",
      "Let's work on changing your thoughts",
      "Here are coping strategies to try",
      "We need to explore underlying patterns",
      "Weeks of sessions to see progress",
      "Focus on diagnosis & treatment plans",
    ],
  },
  {
    icon: "‚úÖ",
    title: "justhear.me",
    color: "text-blue-600",
    items: [
      "That sounds incredibly difficult",
      "Your reaction makes complete sense",
      "Anyone would feel that way",
      "You're not crazy or overreacting",
      "Feel better within 30 minutes",
      "Focus on validation & emotional support",
    ],
  },
];

const SCIENCE = [
  { icon: "üß†", title: "Reduces Stress", desc: "Being truly listened to lowers cortisol levels and calms your nervous system within minutes." },
  { icon: "üí™", title: "Boosts Confidence", desc: "Hearing \"your feelings are valid\" reinforces self-worth and emotional intelligence." },
  { icon: "üõ°Ô∏è", title: "Judgment-Free Zone", desc: "Pure validation calms the mind first. Solutions can follow when you're ready." },
];

const FAQ = [
  {
    q: "Is this therapy?",
    a: "No. This is an anonymous listening & validation service. We provide emotional support and validation, not clinical treatment. Our listeners are here to make you feel heard and understood, not to diagnose or treat mental health conditions.",
  },
  {
    q: "How is it anonymous?",
    a: "We never ask for real names or personal details. All calls are encrypted and confidential. You're just a voice to us, and we're just a listening ear to you. No registration, no forms, no tracking.",
  },
  {
    q: "What if I'm in crisis?",
    a: "If you're having thoughts of self-harm or are in immediate danger, please contact emergency services or a crisis helpline immediately. We're here for emotional support and validation, not crisis intervention.",
  },
  {
    q: "Who are your listeners?",
    a: "Our listeners are trained volunteers who understand the power of validation. They're not therapists, but they are compassionate humans skilled in active listening and providing the emotional support you need.",
  },
  {
    q: "How much does it cost?",
    a: "It's ‚Çπ49 per 30-minute session (reduced from ‚Çπ150). No hidden fees, no contracts.",
  },
  {
    q: "How does scheduling work?",
    a: "Simply click \"Book Session\" to see available time slots. Choose your preferred date and time, and we'll call you at the scheduled moment. Sessions are available based on slot availability.",
  },
];

function AppHeader() {
  const { user, logout } = useAuth();
  const [navOpen, setNavOpen] = useState(false);

  return (
    <header className="fixed inset-x-0 top-0 bg-white/95 backdrop-blur border-b border-gray-200 z-50">
      <div className="max-w-6xl mx-auto flex justify-between items-center py-3 px-3 md:px-6">
        <a href="#top" className="font-bold text-lg md:text-xl bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          justhear.me
        </a>
        
        <nav className="hidden lg:flex gap-6 items-center">
          {NAV_LINKS.map((l) => (
            <a key={l.href} href={l.href} className="text-gray-600 hover:text-blue-600 transition font-medium">
              {l.label}
            </a>
          ))}
          <SchedulerModal />
          
          {user ? (
            <div className="flex items-center gap-2">
              <span className="text-sm text-gray-600">üë§ {user.username}</span>
              <Button variant="outline" size="sm" onClick={logout}>
                Logout
              </Button>
            </div>
          ) : (
            <AuthModal>
              <SharpButton>Login / Sign Up</SharpButton>
            </AuthModal>
          )}
        </nav>

        <div className="lg:hidden">
          <Sheet open={navOpen} onOpenChange={setNavOpen}>
            <SheetTrigger asChild>
              <Button variant="outline" size="icon">
                <span className="sr-only">Open menu</span>
                ‚ò∞
              </Button>
            </SheetTrigger>
            <SheetContent side="right" className="w-80">
              <nav className="flex flex-col gap-6 mt-8">
                {NAV_LINKS.map((l) => (
                  <a
                    key={l.href}
                    href={l.href}
                    className="text-lg block py-2 text-gray-700 hover:text-blue-600 font-medium"
                    onClick={() => setNavOpen(false)}
                  >
                    {l.label}
                  </a>
                ))}
                
                <div className="mt-6 pt-4 border-t border-gray-200 space-y-3">
                  {user ? (
                    <div>
                      <p className="text-sm text-gray-600 mb-2">üë§ {user.username}</p>
                      <Button variant="outline" size="sm" onClick={logout} className="w-full">
                        Logout
                      </Button>
                    </div>
                  ) : (
                    <AuthModal>
                      <SharpButton className="w-full">Login / Sign Up</SharpButton>
                    </AuthModal>
                  )}
                  <SchedulerModal />
                </div>
              </nav>
            </SheetContent>
          </Sheet>
        </div>
      </div>
    </header>
  );
}

export default function App() {
  return (
    <AuthProvider>
      <div className="font-sans min-h-screen bg-neutral-50">
        <AppHeader />
        
        {/* Hidden AuthModal trigger for programmatic access */}
        <AuthModal>
          <button data-auth-trigger style={{ display: 'none' }}>
            Hidden Login Trigger
          </button>
        </AuthModal>

        {/* Hero */}
        <section
          id="top"
          className="min-h-[75vh] flex items-center justify-center bg-gradient-to-br from-blue-100 via-purple-50 to-yellow-100 text-blue-900 relative overflow-hidden"
        >
          <BubbleBackground />
          <div className="max-w-2xl mx-auto text-center px-3 sm:px-6 pt-16 pb-8 md:pb-24 relative z-10">
            <h1 className="text-3xl xs:text-4xl md:text-6xl font-bold mb-5 leading-tight">
              Feeling{" "}
              <span className="bg-gradient-to-r from-pink-400 to-yellow-400 bg-clip-text text-transparent">
                upset?
              </span>
              <br />
              We're here to listen.
            </h1>
            <p className="text-base md:text-xl mb-8 text-blue-700 max-w-2xl mx-auto">
              Talk anonymously with trained listeners who understand.<br />
              <strong>Not therapy</strong> ‚Äî just you, truly <em>heard</em>.
            </p>
            <div className="flex flex-col xs:flex-row gap-3 justify-center">
              <SchedulerModal />
              <Button variant="secondary" className="rounded-full text-blue-600 bg-white hover:bg-gray-50" size="lg" asChild>
                <a href="#how">See How It Works</a>
              </Button>
            </div>
          </div>
        </section>

        {/* Testimonials: horizontal scroll on mobile, grid on desktop */}
        <section id="testimonials" className="py-10 md:py-20 bg-gray-50">
          <div className="max-w-6xl mx-auto px-3 sm:px-6">
            <h2 className="text-3xl md:text-4xl font-bold text-center mb-4 text-gray-800">Real stories, real validation</h2>
            <p className="text-center text-gray-600 mb-6 md:mb-12 text-base md:text-lg">See how a simple conversation changed everything</p>
            <div className="flex md:grid md:grid-cols-4 gap-4 overflow-x-auto scrollbar-hide snap-x md:snap-none pb-2 md:pb-0">
              {TESTIMONIALS.map((t, i) => (
                <div
                  key={i}
                  className={cn(
                    "bg-white rounded-2xl shadow-sm p-6 min-w-[280px] max-w-[320px] shrink-0 snap-center transition-transform hover:-translate-y-1",
                    t.featured && "border-2 border-blue-500 shadow-lg relative"
                  )}
                  style={t.featured ? { overflow: 'visible' } : {}}
                >
                  {t.featured && (
                    <span className="absolute -top-3 left-1/2 -translate-x-1/2 bg-gradient-to-r from-blue-600 to-purple-600 text-white px-4 py-1 rounded-full text-xs font-semibold whitespace-nowrap z-10">
                      ‚ú® Most helpful
                    </span>
                  )}
                  <div className="text-yellow-400 mb-3 text-lg">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</div>
                  <blockquote className="italic mb-4 text-gray-700 leading-relaxed">"{t.quote}"</blockquote>
                  <div className="flex gap-3 items-center">
                    <span className="rounded-full w-12 h-12 flex items-center justify-center bg-gray-100 text-xl">
                      {t.emoji}
                    </span>
                    <div>
                      <strong className="block text-gray-800">Anonymous user</strong>
                      <small className="text-gray-500">{t.meta}</small>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Reach Out: geometric/radial on desktop, horizontal scroll on mobile */}
        <section id="examples" className="py-10 md:py-20 bg-white">
          <div className="max-w-5xl mx-auto px-3 sm:px-6">
            <h2 className="text-3xl md:text-4xl font-bold text-center mb-8 text-gray-800">Reach out to us, when u feel</h2>
            <div className="sm:hidden flex gap-4 overflow-x-auto scrollbar-hide snap-x pb-2">
              {EXAMPLES.map((ex, i) => (
                <div key={i} className="bg-gradient-to-br from-blue-50 to-purple-50 rounded-2xl p-6 min-w-[170px] max-w-[200px] text-center hover:shadow-lg transition border border-blue-100 snap-center">
                  <div className="text-3xl mb-2">{ex.emoji}</div>
                  <div className="text-gray-700 text-sm italic">"{ex.text}"</div>
                </div>
              ))}
            </div>
            <div className="hidden sm:flex justify-center">
              <ReachOut feelings={EXAMPLES} />
            </div>
          </div>
        </section>

        {/* How it works */}
        <section id="how" className="py-10 md:py-20 bg-gray-50">
          <div className="max-w-6xl mx-auto px-3 sm:px-6">
            <h2 className="text-3xl md:text-4xl font-bold text-center mb-10 text-gray-800">How it works</h2>
            <div className="grid md:grid-cols-3 gap-4 md:gap-8">
              {FEATURES.map((f, i) => (
                <div key={i} className="bg-white rounded-2xl shadow-sm p-8 text-center hover:shadow-lg transition">
                  <div className="text-4xl mb-6">{f.icon}</div>
                  <h3 className="font-bold mb-4 text-xl text-gray-800">{f.title}</h3>
                  <p className="text-gray-600 leading-relaxed">{f.desc}</p>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Not Therapy / Comparison */}
        <section id="different" className="py-10 md:py-20 bg-gradient-to-br from-gray-50 to-blue-50">
          <div className="max-w-6xl mx-auto px-3 sm:px-6">
            <h2 className="text-3xl md:text-4xl font-bold text-center mb-6 text-gray-800">We're not therapy ‚Äî we're something different</h2>
            <p className="text-center text-gray-600 mb-12 text-base md:text-lg max-w-3xl mx-auto">
              Sometimes you don't need to be "fixed" or analyzed. You just need someone to say:{" "}
              <em>"Your feelings make complete sense."</em>
            </p>
            <div className="grid md:grid-cols-2 gap-8 mb-12">
              {DIFFERENT.map((d, i) => (
                <div key={i} className={cn(
                  "bg-white rounded-2xl shadow-sm p-8",
                  i === 0 ? "border-l-4 border-red-500" : "border-l-4 border-blue-500 transform md:-translate-y-4"
                )}>
                  <h3 className={cn("font-bold mb-4 text-xl", d.color)}>
                    {d.icon} {d.title}
                  </h3>
                  <ul className="text-gray-600 space-y-2">
                    {d.items.map((item, idx) => (
                      <li key={idx} className="flex items-start">
                        <span className="mr-2 text-gray-400">‚Ä¢</span>
                        {item}
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
            <div className="text-center bg-blue-50 rounded-2xl border border-blue-200 p-8">
              <h3 className="font-bold text-blue-600 mb-6 text-xl">üí° Think of it this way...</h3>
              <div className="grid md:grid-cols-2 gap-8">
                <div className="text-center">
                  <span className="text-4xl mb-4 block">üîß</span>
                  <div>
                    <strong className="text-gray-800">Therapy:</strong><br />
                    <span className="text-gray-600">A mechanic who fixes your car's engine</span>
                  </div>
                </div>
                <div className="text-center">
                  <span className="text-4xl mb-4 block">ü§ó</span>
                  <div>
                    <strong className="text-gray-800">justhear.me:</strong><br />
                    <span className="text-gray-600">
                      A friend who says "Your car breaking down sucks, and you're handling it amazingly"
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Science / Why it helps */}
        <section id="science" className="py-10 md:py-20 bg-white">
          <div className="max-w-6xl mx-auto px-3 sm:px-6">
            <h2 className="text-3xl md:text-4xl font-bold text-center mb-12 text-gray-800">Why validation works</h2>
            <div className="grid md:grid-cols-3 gap-8">
              {SCIENCE.map((f, i) => (
                <div key={i} className="bg-gray-50 rounded-2xl shadow-sm p-8 text-center hover:shadow-lg transition">
                  <div className="text-4xl mb-6">{f.icon}</div>
                  <h3 className="font-bold mb-4 text-xl text-gray-800">{f.title}</h3>
                  <p className="text-gray-600 leading-relaxed">{f.desc}</p>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Pricing */}
        <section id="pricing" className="py-10 md:py-20 bg-gray-50">
          <div className="max-w-4xl mx-auto px-3 sm:px-6">
            <h2 className="text-3xl md:text-4xl font-bold text-center mb-10 text-gray-800">Choose your plan</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Per session */}
              <div className="bg-white rounded-2xl shadow-sm p-8 text-center relative border-2 border-blue-500 shadow-lg transform scale-105">
                <span className="absolute -top-4 left-1/2 -translate-x-1/2 bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-2 rounded-full text-sm font-semibold">
                  Most Popular
                </span>
                <h3 className="font-bold mb-4 text-xl text-gray-800">Per Session</h3>
                <div className="text-lg line-through text-gray-400 mb-2">‚Çπ150</div>
                <div className="text-4xl font-bold text-blue-600 mb-4">‚Çπ49</div>
                <p className="text-gray-600 mb-8">30 minutes of validation</p>
                <SchedulerModal />
              </div>
              
              {/* Monthly "Coming soon" */}
              <div className="bg-white rounded-2xl shadow-sm p-8 text-center relative opacity-60">
                <h3 className="font-bold mb-4 text-xl text-gray-800">Monthly Package</h3>
                <div className="text-4xl font-bold text-blue-600 mb-4">Coming Soon</div>
                <p className="text-gray-600 mb-8">15 sessions per month</p>
                <Button disabled className="w-full rounded-lg">
                  Coming Soon
                </Button>
              </div>
            </div>
          </div>
        </section>

        {/* FAQ */}
        <section id="faq" className="py-10 md:py-20 bg-white">
          <div className="max-w-4xl mx-auto px-3 sm:px-6">
            <h2 className="text-3xl md:text-4xl font-bold text-center mb-10 text-gray-800">Frequently Asked Questions</h2>
            <Accordion type="single" collapsible className="space-y-4">
              {FAQ.map((f, i) => (
                <AccordionItem value={`item-${i}`} key={i} className="bg-gray-50 rounded-2xl px-6 border-0">
                  <AccordionTrigger className="text-left font-semibold text-lg py-6 hover:no-underline hover:text-blue-600">
                    {f.q}
                  </AccordionTrigger>
                  <AccordionContent className="text-gray-600 pb-6 leading-relaxed">
                    {f.a}
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </div>
        </section>

        {/* Footer */}
        <footer className="bg-gradient-to-r from-gray-900 to-blue-900 text-white py-8 md:py-16">
          <div className="max-w-6xl mx-auto px-3 sm:px-6 grid md:grid-cols-3 gap-8 mb-8">
            <div>
              <h3 className="font-bold mb-4 text-xl">justhear.me</h3>
              <p className="text-gray-300 leading-relaxed">Your on-demand safe space to be heard and validated.</p>
            </div>
            <div>
              <h3 className="font-bold mb-4 text-xl">Quick Links</h3>
              <div className="flex flex-col gap-2">
                <a href="#how" className="text-gray-300 hover:text-white transition">How it works</a>
                <a href="#pricing" className="text-gray-300 hover:text-white transition">Pricing</a>
                <a href="#faq" className="text-gray-300 hover:text-white transition">FAQ</a>
                <a href="#" className="text-gray-300 hover:text-white transition">Privacy Policy</a>
              </div>
            </div>
            <div>
              <h3 className="font-bold mb-4 text-xl">Contact</h3>
              <div className="flex flex-col gap-2">
                <a href="tel:+1999999999" className="text-gray-300 hover:text-white transition">Call: +1 (999) 999-9999</a>
                <a href="mailto:hello@justhear.me" className="text-gray-300 hover:text-white transition">hello@justhear.me</a>
              </div>
            </div>
          </div>
          <div className="text-center py-6 border-t border-gray-700 text-gray-400">
            ¬© 2025 justhear.me ¬∑ All rights reserved
          </div>
        </footer>
      </div>
    </AuthProvider>
  );
}
</file>

<file path="src/index.css">
.bubble {
  animation: bubble-rise 20s linear infinite;
}
.delay-0  { animation-delay: 0s; }
.delay-4  { animation-delay: 4s; }
.delay-8  { animation-delay: 8s; }
.delay-12 { animation-delay: 12s; }
.delay-16 { animation-delay: 16s; }

@keyframes bubble-rise {
  0%   { transform: translateY(0) translateX(0); opacity: .3; }
  50%  { opacity: .5; }
  100% { transform: translateY(-260px) translateX(40px); opacity: 0; }
}

/* Mobile horizontal scrollbars hidden (for testimonials / emotion cards) */
.scrollbar-hide {
  -ms-overflow-style: none;  /* IE and Edge */
  scrollbar-width: none;     /* Firefox */
}
.scrollbar-hide::-webkit-scrollbar {
  display: none;             /* Chrome, Safari, Opera */
}

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "justhear-react",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.2.1",
    "@radix-ui/react-accordion": "^1.2.12",
    "@radix-ui/react-collapsible": "^1.1.12",
    "@radix-ui/react-dialog": "^1.1.15",
    "@types/js-cookie": "^3.0.6",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "js-cookie": "^3.0.5",
    "lucide-react": "^0.540.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-hook-form": "^7.62.0",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^4.0.17"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@types/node": "^24.3.0",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "@vitejs/plugin-react-swc": "^4.0.1",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.39.1",
    "vite": "^7.1.2"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    // ... all your other existing options
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})
</file>

</files>
